{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/LearningQueue.js","../../src/LanguageTutor.js","../../node_modules/svelte/store/index.mjs","../../src/settingsStore.js","../../src/autoSave.js","../../src/LanguageSettings.svelte","../../src/DisplaySettings.svelte","../../src/AlgorithmSettings.svelte","../../src/CategoryManager.svelte","../../src/DeveloperSettings.svelte","../../src/LearningSession.svelte","../../src/QueueDisplay.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","/**\n * LearningQueue - Adaptive Spaced Repetition System\n * \n * A sophisticated queue-based language learning system that uses AI-scored responses\n * and inertia-based movement to optimize vocabulary retention.\n */\n\nexport class LearningQueue {\n  constructor(sourceLanguage, targetLanguage, level = 'basic', baseDir = '/learning/', options = {}) {\n    this.sourceLanguage = sourceLanguage;\n    this.targetLanguage = targetLanguage;\n    this.baseDir = baseDir;\n    this.level = level;\n    this.testDatabase = {};\n    this.queue = [];\n    this.categories = {};\n    this.currentTestIndex = 0;\n    this.storageKey = `learning_queue_${sourceLanguage}_${targetLanguage}_${level}`;\n    \n    // Initialize options with defaults\n    this.options = {\n      passThreshold: 7,\n      memoryLength: 20,\n      repetitivenessFactor: 5,\n      ...options\n    };\n    \n    // Don't call init() automatically - let the caller control when it happens\n  }\n  \n  async init() {\n    await this.loadTestData();\n    this.loadState();\n  }\n  \n  async loadTestData() {\n    try {\n      const filename = `${this.sourceLanguage}-${this.targetLanguage}-${this.level}.json`;\n      const response = await fetch(`${this.baseDir}${filename}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load test data: ${response.status}`);\n      }\n      \n      this.testDatabase = await response.json();\n    } catch (error) {\n      console.error('Error loading test data:', error);\n      // Fallback to sample data for demo\n      this.testDatabase = {\n        \"travel\": [\n          { source: \"Good morning\", target: \"Buongiorno\" },\n          { source: \"Where is the station?\", target: \"Dove è la stazione?\" },\n          { source: \"Thank you very much\", target: \"Grazie mille\" }\n        ],\n        \"food\": [\n          { source: \"I would like a coffee\", target: \"Vorrei un caffè\" },\n          { source: \"How much does it cost?\", target: \"Quanto costa?\" },\n          { source: \"The bill please\", target: \"Il conto per favore\" }\n        ]\n      };\n    }\n  }\n  \n  loadState() {\n    const savedState = localStorage.getItem(this.storageKey);\n    \n    if (savedState) {\n      try {\n        const state = JSON.parse(savedState);\n        this.categories = state.categories || {};\n        this.queue = state.queue || [];\n        \n        this.syncQueueWithDatabase();\n      } catch (error) {\n        console.error('Error loading saved state:', error);\n        this.initializeAllCategories();\n      }\n    } else {\n      this.initializeAllCategories();\n    }\n  }\n  \n  syncQueueWithDatabase() {\n    const expectedTests = new Set();\n    \n    for (const [categoryName, isSelected] of Object.entries(this.categories)) {\n      if (isSelected && this.testDatabase[categoryName]) {\n        this.testDatabase[categoryName].forEach(test => {\n          expectedTests.add(this.createTestId(test));\n        });\n      }\n    }\n    \n    this.queue = this.queue.filter(item => {\n      const testId = this.createTestId({ source: item.source, target: item.target });\n      return expectedTests.has(testId);\n    });\n    \n    const currentTestIds = new Set(this.queue.map(item => \n      this.createTestId({ source: item.source, target: item.target })\n    ));\n    \n    for (const [categoryName, isSelected] of Object.entries(this.categories)) {\n      if (isSelected && this.testDatabase[categoryName]) {\n        this.testDatabase[categoryName].forEach(test => {\n          const testId = this.createTestId(test);\n          if (!currentTestIds.has(testId)) {\n            this.addTestToQueue(test, categoryName);\n          }\n        });\n      }\n    }\n  }\n  \n  initializeAllCategories() {\n    // Don't automatically enable all categories - let the UI control this\n    for (const categoryName of Object.keys(this.testDatabase)) {\n      this.categories[categoryName] = false; // Start with all disabled\n    }\n  }\n  \n  createTestId(test) {\n    return `${test.source}|${test.target}`;\n  }\n  \n  addTestToQueue(test, categoryName) {\n    const queueItem = {\n      source: test.source,\n      target: test.target,\n      inertia: -1, // Start at maximum resistance - phrases are \"sticky\" until learned\n      category: categoryName,\n      recentResults: new Array(this.options.memoryLength).fill(0) // Initialize with full history of failures\n    };\n    \n    const randomIndex = Math.floor(Math.random() * (this.queue.length + 1));\n    this.queue.splice(randomIndex, 0, queueItem);\n  }\n  \n  addCategoryToQueue(categoryName) {\n    if (this.testDatabase[categoryName]) {\n      this.testDatabase[categoryName].forEach(test => {\n        this.addTestToQueue(test, categoryName);\n      });\n    }\n  }\n  \n  removeCategoryFromQueue(categoryName) {\n    if (!this.testDatabase[categoryName]) return;\n    \n    const categoryTestIds = new Set(\n      this.testDatabase[categoryName].map(test => this.createTestId(test))\n    );\n    \n    this.queue = this.queue.filter(item => {\n      const testId = this.createTestId({ source: item.source, target: item.target });\n      return !categoryTestIds.has(testId);\n    });\n    \n    if (this.currentTestIndex >= this.queue.length) {\n      this.currentTestIndex = 0;\n    }\n  }\n  \n  getCategories() {\n    return Object.keys(this.testDatabase);\n  }\n  \n  setCategory(categoryName, enabled) {\n    if (enabled && !this.categories[categoryName]) {\n      this.categories[categoryName] = true;\n      this.addCategoryToQueue(categoryName);\n    } else if (!enabled && this.categories[categoryName]) {\n      this.categories[categoryName] = false;\n      this.removeCategoryFromQueue(categoryName);\n    }\n    \n    this.saveState();\n  }\n  \n  getNextTest() {\n    if (this.queue.length === 0) {\n      return null;\n    }\n    \n    if (this.currentTestIndex >= this.queue.length) {\n      this.currentTestIndex = 0;\n    }\n    \n    const test = this.queue[this.currentTestIndex];\n    return {\n      source: test.source,\n      target: test.target,\n      inertia: test.inertia,\n      category: test.category,\n      recentResults: test.recentResults || [] // Include history in response\n    };\n  }\n  \n  scoreCurrentTest(score) {\n    if (this.queue.length === 0 || this.currentTestIndex >= this.queue.length) {\n      return;\n    }\n    \n    const currentTest = this.queue.splice(this.currentTestIndex, 1)[0];\n    \n    // Update binary algorithm with memory\n    if (!currentTest.recentResults) {\n      currentTest.recentResults = [];\n    }\n    \n    // Add new result (1 for pass, 0 for fail)\n    const passed = score >= this.options.passThreshold;\n    currentTest.recentResults.push(passed ? 1 : 0);\n    \n    // If the test failed, convert the most recent success to a failure\n    if (!passed) {\n      // Find the most recent success (working backwards from the end)\n      for (let i = currentTest.recentResults.length - 2; i >= 0; i--) {\n        if (currentTest.recentResults[i] === 1) {\n          currentTest.recentResults[i] = 0;\n          break; // Only convert one success\n        }\n      }\n    }\n    \n    // Keep only last N results\n    const memoryLength = this.options.memoryLength;\n    if (currentTest.recentResults.length > memoryLength) {\n      currentTest.recentResults = currentTest.recentResults.slice(-memoryLength);\n    }\n    \n    // Calculate success rate\n    const successCount = currentTest.recentResults.reduce((sum, result) => sum + result, 0);\n    const successRate = currentTest.recentResults.length > 0 ? successCount / currentTest.recentResults.length : 0;\n    \n    // Calculate movement based on success rate and repetitiveness factor\n    const repetitivenessFactor = this.options.repetitivenessFactor;\n    const power = 2 + (repetitivenessFactor - 1) * 0.2; // Maps 1-10 to 2.0-3.8\n    const movement = Math.pow(successRate, power);\n    \n    // Calculate new position in queue\n    const newPosition = Math.min(Math.floor(movement * this.queue.length), this.queue.length);\n    \n    this.queue.splice(newPosition, 0, currentTest);\n    \n    this.currentTestIndex = 0;\n    \n    this.saveState();\n  }\n  \n  updateOptions(newOptions) {\n    this.options = { ...this.options, ...newOptions };\n  }\n  \n  saveState() {\n    const state = {\n      categories: this.categories,\n      queue: this.queue\n    };\n    \n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(state));\n    } catch (error) {\n      console.error('Error saving state to localStorage:', error);\n    }\n  }\n  \n  getQueueLength() {\n    return this.queue.length;\n  }\n  \n  getTopQueueItems(count = null) {\n    const itemsToShow = count ? Math.min(count, this.queue.length) : this.queue.length;\n    return this.queue.slice(0, itemsToShow).map((item, index) => {\n      const successCount = item.recentResults ? item.recentResults.reduce((sum, result) => sum + result, 0) : 0;\n      const successRate = item.recentResults && item.recentResults.length > 0 ? successCount / item.recentResults.length : 0;\n      \n      return {\n        position: index + 1,\n        source: item.source,\n        target: item.target,\n        inertia: item.inertia,\n        category: item.category,\n        recentResults: item.recentResults || [],\n        successRate: successRate\n      };\n    });\n  }\n  \n  reset() {\n    console.log('🔄 Resetting LearningQueue to initial state');\n    this.queue = [];\n    this.categories = {};\n    this.currentTestIndex = 0;\n    localStorage.removeItem(this.storageKey);\n    this.initializeAllCategories();\n    console.log('✅ LearningQueue reset complete');\n  }\n  \n  getQueueStats() {\n    const stats = {\n      totalItems: this.queue.length,\n      categories: {},\n      inertiaDistribution: {\n        negative: 0,\n        neutral: 0,\n        positive: 0\n      }\n    };\n    \n    // Count items by category and success rate\n    this.queue.forEach(item => {\n      // Category stats\n      if (!stats.categories[item.category]) {\n        stats.categories[item.category] = 0;\n      }\n      stats.categories[item.category]++;\n      \n      // Success rate distribution (using recentResults for binary algorithm)\n      const successCount = item.recentResults ? item.recentResults.reduce((sum, result) => sum + result, 0) : 0;\n      const successRate = item.recentResults && item.recentResults.length > 0 ? successCount / item.recentResults.length : 0;\n      \n      if (successRate < 0.3) {\n        stats.inertiaDistribution.negative++;\n      } else if (successRate > 0.7) {\n        stats.inertiaDistribution.positive++;\n      } else {\n        stats.inertiaDistribution.neutral++;\n      }\n    });\n    \n    return stats;\n  }\n}\n","/**\n * LanguageTutor - AI-Powered Language Learning with Real-time Pronunciation Scoring\n * \n * A powerful JavaScript class for building language learning applications with real-time \n * pronunciation scoring and text-to-speech feedback using OpenAI's Realtime API.\n * Enhanced with audible notification bleeps for user interaction prompts.\n */\n\nexport class LanguageTutor {\n    constructor(outputElement, sourceLanguage = 'English', targetLanguage = 'Italian', options = {}) {\n        // Basic configuration\n        this.outputElement = outputElement;\n        this.sourceLanguage = sourceLanguage;\n        this.targetLanguage = targetLanguage;\n        \n        // Default options\n        const defaultOptions = {\n            apiKeyEndpoint: '?mode=get_key',\n            feedbackThreshold: 7,  // Score below which target pronunciation is played\n            statusCallback: null,  // Optional callback for status updates\n            loggingVerbosity: 5,   // Logging verbosity level (0-10, 0=silent, 10=verbose)\n            audioPath: 'audio/',   // Base path for pre-generated audio files\n            enableBleep: true,     // Enable audible notification bleep (NEW)\n            enableAudioHints: false, // Enable audio hints for struggling phrases\n            audioHintDuration: 0.25, // Fraction of audio to play as hint (0.25 = 25%)\n            audioHintMinWords: 3,    // Minimum words in phrase to enable hints\n            vad: {\n                threshold: 0.6,\n                prefixPaddingMs: 200,\n                silenceDurationMs: 800\n            }\n        };\n        \n        // Merge user options with defaults\n        this.options = this.mergeOptions(defaultOptions, options);\n        \n        // Audio state\n        this.audioContext = null;\n        this.currentAudioStream = null;\n        this.audioProcessor = null;\n        this.ws = null;\n        this.isListening = false;\n        \n        // Session key management\n        this.currentSessionKey = null;\n        this.keyRefreshInterval = null;\n        \n        this.log(3, `🎓 LanguageTutor initialized: ${sourceLanguage} → ${targetLanguage}`);\n        this.log(7, '📋 Options:', this.options);\n        \n        // Start session key management\n        this.initializeSessionKeys();\n    }\n    \n    // ========== LOGGING SYSTEM ==========\n    log(level, ...args) {\n        if (this.options.loggingVerbosity >= level) {\n            console.log(...args);\n        }\n    }\n    \n    logError(level, ...args) {\n        if (this.options.loggingVerbosity >= level) {\n            console.error(...args);\n        }\n    }\n    \n    logWarn(level, ...args) {\n        if (this.options.loggingVerbosity >= level) {\n            console.warn(...args);\n        }\n    }\n    \n    // ========== UTILITY METHODS ==========\n    mergeOptions(defaults, userOptions) {\n        const merged = { ...defaults };\n        \n        for (const key in userOptions) {\n            if (userOptions.hasOwnProperty(key)) {\n                if (typeof userOptions[key] === 'object' && userOptions[key] !== null && !Array.isArray(userOptions[key])) {\n                    // Deep merge for nested objects like 'vad'\n                    merged[key] = { ...defaults[key], ...userOptions[key] };\n                } else {\n                    merged[key] = userOptions[key];\n                }\n            }\n        }\n        \n        return merged;\n    }\n    \n    // ========== AUDIO NOTIFICATION SYSTEM (NEW) ==========\n    /**\n     * Generate a pleasant notification bleep to signal user interaction\n     */\n    async playNotificationBleep() {\n        if (!this.options.enableBleep) {\n            this.log(7, '🔇 Notification bleep disabled');\n            return;\n        }\n        \n        try {\n            this.log(6, '🎵 Playing notification bleep');\n            \n            // Create a temporary audio context for the bleep\n            const tempAudioContext = new (window.AudioContext || window.webkitAudioContext)();\n            \n            // Create a pleasant two-tone bleep (like a gentle chime)\n            const duration = 0.3; // 300ms total\n            const sampleRate = tempAudioContext.sampleRate;\n            const buffer = tempAudioContext.createBuffer(1, duration * sampleRate, sampleRate);\n            const data = buffer.getChannelData(0);\n            \n            // Generate a pleasant two-tone bleep: 800Hz then 1000Hz\n            for (let i = 0; i < buffer.length; i++) {\n                const time = i / sampleRate;\n                let frequency;\n                let amplitude;\n                \n                if (time < 0.15) {\n                    // First tone: 800Hz\n                    frequency = 800;\n                    amplitude = 0.1 * Math.sin(Math.PI * time / 0.15); // Fade in/out\n                } else {\n                    // Second tone: 1000Hz  \n                    frequency = 1000;\n                    amplitude = 0.1 * Math.sin(Math.PI * (time - 0.15) / 0.15); // Fade in/out\n                }\n                \n                data[i] = amplitude * Math.sin(2 * Math.PI * frequency * time);\n            }\n            \n            // Play the bleep\n            const source = tempAudioContext.createBufferSource();\n            source.buffer = buffer;\n            source.connect(tempAudioContext.destination);\n            \n            return new Promise((resolve) => {\n                source.onended = () => {\n                    tempAudioContext.close();\n                    this.log(7, '✅ Notification bleep completed');\n                    resolve();\n                };\n                \n                source.start();\n            });\n            \n        } catch (error) {\n            this.logWarn(4, '⚠️ Could not play notification bleep:', error.message);\n            // Don't throw - this is a nice-to-have feature\n        }\n    }\n    \n    // ========== SESSION KEY MANAGEMENT ==========\n    async initializeSessionKeys() {\n        try {\n            await this.refreshSessionKey();\n            this.startKeyRefreshTimer();\n        } catch (error) {\n            this.logError(1, '❌ Failed to initialize session keys:', error);\n        }\n    }\n    \n    async refreshSessionKey() {\n        try {\n            this.log(5, '🔑 Refreshing session key...');\n            const response = await fetch(this.options.apiKeyEndpoint);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (data.error) {\n                throw new Error(data.error);\n            }\n            this.currentSessionKey = data.session_token;\n            this.log(4, '✅ Session key refreshed successfully');\n            return this.currentSessionKey;\n        } catch (error) {\n            this.logError(2, '❌ Error refreshing session key:', error);\n            this.showError('Failed to refresh session key: ' + error.message);\n            return null;\n        }\n    }\n    \n    async getSessionKey() {\n        if (this.currentSessionKey) {\n            this.log(7, '🔑 Using cached session key');\n            return this.currentSessionKey;\n        }\n        \n        this.log(5, '🔑 Getting initial session key...');\n        return await this.refreshSessionKey();\n    }\n    \n    startKeyRefreshTimer() {\n        // Refresh key every 50 seconds (10 second buffer before 60s expiry)\n        this.keyRefreshInterval = setInterval(async () => {\n            await this.refreshSessionKey();\n        }, 50000);\n        this.log(6, '⏰ Started key refresh timer (every 50 seconds)');\n    }\n    \n    stopKeyRefreshTimer() {\n        if (this.keyRefreshInterval) {\n            clearInterval(this.keyRefreshInterval);\n            this.keyRefreshInterval = null;\n            this.log(6, '⏰ Stopped key refresh timer');\n        }\n    }\n    \n    // ========== AUDIO PLAYBACK ==========\n    async speakText(text, language = null) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                // Auto-detect language if not specified\n                if (!language) {\n                    language = this.detectLanguage(text);\n                }\n                \n                this.log(4, `🎙️ Playing audio for \"${text}\" in ${language}`);\n                \n                // Determine if this is native or learning speed based on language\n                const isNativeLanguage = (language === this.sourceLanguage);\n                const speedMode = isNativeLanguage ? 'native' : 'learning';\n                \n                this.log(6, `🎯 Speed mode: ${speedMode} (${isNativeLanguage ? 'normal speed' : 'slow/clear'})`);\n                \n                // Generate filename using same logic as server-side script\n                const filename = await this.generateAudioFilename(text);\n                const audioUrl = `${this.options.audioPath}${language}/${speedMode}/${filename}`;\n                \n                this.log(6, `🔊 Loading audio from: ${audioUrl}`);\n                \n                // Load and play the audio file\n                await this.playAudioFromUrl(audioUrl);\n                resolve();\n                \n            } catch (error) {\n                this.logError(3, '❌ Error playing audio:', error);\n                this.showError('Audio playback failed: ' + error.message);\n                reject(error);\n            }\n        });\n    }\n    \n    /**\n     * Generate audio filename using same logic as server-side script\n     * Now uses SHA-256 instead of MD5 for better compatibility\n     */\n    async generateAudioFilename(text) {\n        // Convert to UTF-8 bytes first, then sanitize byte by byte to match server behavior\n        const utf8Bytes = this.stringToUtf8Bytes(text);\n        \n        // Take first 20 bytes (not characters) and convert each byte to char\n        const first20Bytes = utf8Bytes.slice(0, 20);\n        let sanitized = '';\n        \n        for (let i = 0; i < first20Bytes.length; i++) {\n            const byte = first20Bytes[i];\n            const char = String.fromCharCode(byte);\n            \n            // Replace non-alphanumeric with underscore (same regex as server: [^a-zA-Z0-9])\n            if (/[a-zA-Z0-9]/.test(char)) {\n                sanitized += char;\n            } else {\n                sanitized += '_';\n            }\n        }\n        \n        // Remove trailing underscores\n        sanitized = sanitized.replace(/_+$/, '');\n        \n        if (!sanitized) {\n            sanitized = 'phrase';\n        }\n        \n        // Generate SHA-256 hash of original text\n        const hash = await this.sha256(text);\n        \n        // Take first 8 characters of hash to match typical hash length expectations\n        const shortHash = hash.substring(0, 8);\n        \n        return `${sanitized}_${shortHash}.mp3`;\n    }\n    \n    /**\n     * SHA-256 hash implementation using Web Crypto API\n     * This will work consistently across modern browsers and match server-side implementations\n     */\n    async sha256(str) {\n        // Convert string to UTF-8 bytes\n        const utf8Bytes = new TextEncoder().encode(str);\n        \n        // Generate SHA-256 hash\n        const hashBuffer = await crypto.subtle.digest('SHA-256', utf8Bytes);\n        \n        // Convert buffer to hex string\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\n        \n        return hashHex;\n    }\n    \n    /**\n     * Convert string to UTF-8 byte array\n     */\n    stringToUtf8Bytes(str) {\n        const bytes = [];\n        for (let i = 0; i < str.length; i++) {\n            let code = str.charCodeAt(i);\n            if (code < 0x80) {\n                bytes.push(code);\n            } else if (code < 0x800) {\n                bytes.push(0xC0 | (code >> 6));\n                bytes.push(0x80 | (code & 0x3F));\n            } else if (code < 0x10000) {\n                bytes.push(0xE0 | (code >> 12));\n                bytes.push(0x80 | ((code >> 6) & 0x3F));\n                bytes.push(0x80 | (code & 0x3F));\n            } else {\n                bytes.push(0xF0 | (code >> 18));\n                bytes.push(0x80 | ((code >> 12) & 0x3F));\n                bytes.push(0x80 | ((code >> 6) & 0x3F));\n                bytes.push(0x80 | (code & 0x3F));\n            }\n        }\n        return bytes;\n    }\n    \n    /**\n     * Load and play audio from URL\n     */\n    async playAudioFromUrl(url) {\n        return new Promise((resolve, reject) => {\n            try {\n                this.log(6, '🔊 Creating audio element for playback');\n                \n                const audio = new Audio();\n                \n                audio.onloadeddata = () => {\n                    this.log(7, '✅ Audio loaded successfully');\n                };\n                \n                audio.onended = () => {\n                    this.log(6, '✅ Audio playback finished');\n                    resolve();\n                };\n                \n                audio.onerror = (error) => {\n                    this.logError(3, '❌ Audio playback error:', error);\n                    reject(new Error(`Failed to load audio from ${url}`));\n                };\n                \n                audio.oncanplaythrough = () => {\n                    this.log(7, '▶️ Starting audio playback');\n                    audio.play().catch(playError => {\n                        this.logError(3, '❌ Audio play() failed:', playError);\n                        reject(playError);\n                    });\n                };\n                \n                // Set source and start loading\n                audio.src = url;\n                audio.load();\n                \n            } catch (error) {\n                this.logError(3, '❌ Error setting up audio playback:', error);\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Play a portion of audio file as a hint (first 25% of duration)\n     */\n    async playAudioHint(text, language = null, speedMode = 'learning') {\n        return new Promise(async (resolve, reject) => {\n            try {\n                // Use target language if not specified\n                if (!language) {\n                    language = this.targetLanguage;\n                }\n                \n                this.log(5, `🎯 Playing audio hint for: \"${text}\" in ${language}`);\n                \n                // Generate filename using same logic as speakText method\n                const filename = await this.generateAudioFilename(text);\n                const audioUrl = `${this.options.audioPath}${language}/${speedMode}/${filename}`;\n                \n                this.log(6, `🔊 Loading hint audio from: ${audioUrl}`);\n                \n                const audio = new Audio();\n                \n                audio.onloadedmetadata = () => {\n                    this.log(7, `✅ Audio metadata loaded, duration: ${audio.duration}s`);\n                    \n                    // Calculate hint duration based on configurable percentage\n                    const hintDuration = audio.duration * this.options.audioHintDuration;\n                    this.log(7, `🎯 Playing first ${hintDuration.toFixed(2)}s as hint (${(this.options.audioHintDuration * 100)}% of ${audio.duration.toFixed(2)}s)`);\n                    \n                    // Set up a timer to stop playback after configured duration\n                    const stopTimer = setTimeout(() => {\n                        audio.pause();\n                        audio.currentTime = 0;\n                        this.log(7, '🔇 Hint playback completed');\n                        resolve();\n                    }, hintDuration * 1000);\n                    \n                    // Clean up timer if audio ends naturally (shouldn't happen with hints)\n                    audio.onended = () => {\n                        clearTimeout(stopTimer);\n                        this.log(7, '🔇 Audio hint ended naturally');\n                        resolve();\n                    };\n                    \n                    // Start playback\n                    audio.play().catch(playError => {\n                        clearTimeout(stopTimer);\n                        this.logError(3, '❌ Audio hint play() failed:', playError);\n                        reject(playError);\n                    });\n                };\n                \n                audio.onerror = (error) => {\n                    this.logError(3, '❌ Audio hint error:', error);\n                    reject(new Error(`Failed to load audio hint from ${audioUrl}`));\n                };\n                \n                // Set source and start loading\n                audio.src = audioUrl;\n                audio.load();\n                \n            } catch (error) {\n                this.logError(3, '❌ Error setting up audio hint:', error);\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Determine if an audio hint should be played based on phrase history and word count\n     */\n    shouldPlayHint(targetText, recentResults) {\n        if (!recentResults || recentResults.length === 0) {\n            this.log(8, '🎯 No hint: no recent results');\n            return false;\n        }\n        \n        // Check word count - skip hints for short phrases\n        const wordCount = targetText.trim().split(/\\s+/).length;\n        if (wordCount < this.options.audioHintMinWords) {\n            this.log(8, `🎯 No hint: phrase too short (${wordCount} words < ${this.options.audioHintMinWords} minimum)`);\n            return false;\n        }\n        \n        const successCount = recentResults.filter(r => r === 1).length;\n        const successRate = successCount / recentResults.length;\n        \n        this.log(8, `🎯 Hint check: ${successCount}/${recentResults.length} success rate: ${successRate.toFixed(2)}, words: ${wordCount}`, recentResults);\n        \n        // Play hint if: has some correct attempts (> 0) but success rate is less than 50%\n        const shouldHint = successCount > 0 && successRate < 0.5;\n        this.log(8, `🎯 Should play hint: ${shouldHint}`);\n        return shouldHint;\n    }\n\n    \n    // ========== AUDIO RECORDING ==========\n    async startRecording() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ \n                audio: {\n                    sampleRate: 24000,\n                    channelCount: 1,\n                    echoCancellation: true,\n                    noiseSuppression: true\n                } \n            });\n            \n            this.currentAudioStream = stream;\n            this.audioContext = new AudioContext({ sampleRate: 24000 });\n            const source = this.audioContext.createMediaStreamSource(stream);\n            \n            this.audioProcessor = this.audioContext.createScriptProcessor(1024, 1, 1);\n            this.audioProcessor.onaudioprocess = (event) => {\n                if (this.ws && this.ws.readyState === WebSocket.OPEN && this.isListening) {\n                    const audioData = event.inputBuffer.getChannelData(0);\n                    const pcm16 = new Int16Array(audioData.length);\n                    \n                    for (let i = 0; i < audioData.length; i++) {\n                        pcm16[i] = Math.max(-32768, Math.min(32767, audioData[i] * 32768));\n                    }\n                    \n                    const uint8Array = new Uint8Array(pcm16.buffer);\n                    const base64Audio = btoa(String.fromCharCode.apply(null, uint8Array));\n                    \n                    this.ws.send(JSON.stringify({\n                        type: 'input_audio_buffer.append',\n                        audio: base64Audio\n                    }));\n                }\n            };\n            \n            source.connect(this.audioProcessor);\n            this.audioProcessor.connect(this.audioContext.destination);\n            \n            this.isListening = true;\n            this.log(5, '🎤 Started recording and listening');\n            \n        } catch (error) {\n            this.logError(2, 'Error starting recording:', error);\n            this.showError('Could not access microphone: ' + error.message);\n            throw error;\n        }\n    }\n    \n    pauseListening() {\n        this.isListening = false;\n        this.log(6, '⏸️ Paused listening (microphone still active)');\n    }\n    \n    resumeListening() {\n        this.isListening = true;\n        this.log(6, '▶️ Resumed listening');\n    }\n    \n    stopRecording() {\n        this.isListening = false;\n        \n        if (this.currentAudioStream) {\n            this.currentAudioStream.getTracks().forEach(track => track.stop());\n            this.currentAudioStream = null;\n        }\n        \n        if (this.audioProcessor) {\n            this.audioProcessor.disconnect();\n            this.audioProcessor = null;\n        }\n        \n        if (this.audioContext && this.audioContext.state !== 'closed') {\n            this.audioContext.close();\n            this.audioContext = null;\n        }\n        \n        this.log(5, '🛑 Stopped recording completely');\n    }\n    \n    // Simple language detection based on known source/target languages\n    detectLanguage(text) {\n        // This is a simple heuristic - in a real app you might use a more sophisticated approach\n        // For now, assume shorter phrases or common English words are source language\n        const englishWords = ['the', 'a', 'an', 'is', 'are', 'was', 'were', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'];\n        const words = text.toLowerCase().split(/\\s+/);\n        const englishWordCount = words.filter(word => englishWords.includes(word)).length;\n        \n        // If more than 20% are common English words, assume it's the source language\n        if (englishWordCount / words.length > 0.2) {\n            return this.sourceLanguage;\n        }\n        \n        // Otherwise assume target language\n        return this.targetLanguage;\n    }\n    \n    // ========== UI HELPERS ==========\n    showStatus(message) {\n        this.log(7, '📢 Status:', message);\n        \n        // Call status callback if provided\n        if (this.options.statusCallback) {\n            this.options.statusCallback(message);\n        }\n        \n        // Update output element if provided\n        if (this.outputElement) {\n            this.outputElement.textContent = message;\n        }\n    }\n    \n    showError(message) {\n        this.logError(2, '❌ Error:', message);\n        // Could emit an event or call a callback here\n        if (this.outputElement) {\n            this.outputElement.textContent = 'Error: ' + message;\n            this.outputElement.style.color = 'red';\n            setTimeout(() => {\n                this.outputElement.style.color = '';\n            }, 3000);\n        }\n    }\n    \n    showScore(score) {\n        this.log(4, '📊 Score:', score);\n        // Return score info for UI to handle\n        return {\n            score: score,\n            message: this.getScoreMessage(score),\n            emoji: this.getScoreEmoji(score)\n        };\n    }\n    \n    getScoreMessage(score) {\n        if (score >= 8) return 'Excellent work!';\n        if (score >= 6) return 'Good job!';\n        return 'Keep practicing!';\n    }\n    \n    getScoreEmoji(score) {\n        if (score >= 8) return '🎉';\n        if (score >= 6) return '👍';\n        return '📚';\n    }\n    \n    // ========== OPTIONS MANAGEMENT ==========\n    updateOptions(newOptions) {\n        this.log(5, '🔧 Updating tutor options:', newOptions);\n        \n        // Merge new options with existing ones\n        this.options = this.mergeOptions(this.options, newOptions);\n        \n        this.log(6, '✅ Options updated:', this.options);\n        return this.options;\n    }\n    \n    getOptions() {\n        return { ...this.options }; // Return a copy to prevent external modification\n    }\n    \n    // ========== CACHE MANAGEMENT ==========\n    clearTTSCache() {\n        // Legacy method - now just clears any old cache data\n        try {\n            localStorage.removeItem('tts_audio_cache');\n            this.log(4, '🗑️ Legacy TTS cache cleared successfully');\n            return true;\n        } catch (error) {\n            this.logError(3, '❌ Error clearing legacy TTS cache:', error);\n            return false;\n        }\n    }\n    \n    getTTSCacheSize() {\n        // Legacy method - return minimal info since we're not using client-side cache anymore\n        return {\n            entries: 0,\n            chunks: 0,\n            sizeBytes: 0,\n            sizeMB: 0,\n            note: 'Using server-side audio files - no client cache needed'\n        };\n    }\n    \n    // ========== MAIN TEST FUNCTION ==========\n    async test(sourceText, targetText, recentResults = [], waitTime = 10) {\n        try {\n            this.showStatus('Getting session key...');\n            const sessionKey = await this.getSessionKey();\n            if (!sessionKey) {\n                return {\n                    score: 0,\n                    commentary: 'Failed to get session key',\n                    stop: false\n                };\n            }\n            \n            this.showStatus('Connecting to ChatGPT...');\n            this.log(4, '🔗 Creating new ChatGPT WebSocket connection for testing');\n            this.log(6, '🎚️ Using VAD settings:', this.options.vad);\n            this.log(6, '🎯 Feedback threshold:', this.options.feedbackThreshold);\n            \n            // Connect to ChatGPT Realtime API\n            this.ws = new WebSocket(\n                'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01&openai-beta=realtime%3Dv1',\n                [`realtime`, `openai-insecure-api-key.${sessionKey}`, \"openai-beta.realtime-v1\"]\n            );\n            \n            return new Promise((resolve) => {\n                let hasResponse = false;\n                let silenceTimer;\n                \n                this.ws.onopen = async () => {\n                    this.log(5, '✅ Connected to ChatGPT Realtime API');\n                    \n                    // Prepare the prompt for ChatGPT\n                    const prompt = `You are a language learning tutor. The user will attempt to translate \"${sourceText}\" from ${this.sourceLanguage} into ${this.targetLanguage}. Your job is to:\n\n1. Listen to their pronunciation and translation attempt in ${this.targetLanguage}\n2. Rate their overall performance from 1-10 (1=can't translate, 4=most words correct, but some missing, 6=words correct, but pronunciation is poor, 8=Right words, OK pronunciation, 10=perfect!) considering both:\n   - Translation accuracy (did they get the meaning right?)\n   - Pronunciation quality (does it sound like proper ${this.targetLanguage}?)\n3. Special cases:\n   - If they say \"I don't know\", \"I give up\", \"skip\", \"pass\", or similar phrases in ${this.sourceLanguage}, give them a score of 1 and provide encouraging feedback\n   - If they say \"again\", \"play it again\", \"repeat\", \"one more time\", or similar in any language, give them a score of 0 with commentary explaining they'll hear it again\n   - If they say \"stop\", \"pause\", \"that's enough\", \"quit\", \"finish\", \"done\" or similar in any language, respond with {\"score\": 0, \"commentary\": \"User requested to stop\", \"stop\": true}\n   - If they remain completely silent, score them 0 with appropriate commentary\n4. Provide specific, helpful commentary on their attempt including:\n   - Specific tips for better ${this.targetLanguage} pronunciation\n   - For \"I don't know\" responses, provide the correct answer and encouragement\n   - For \"again\" requests, acknowledge they'll hear the phrase repeated\n\nRespond with a JSON object in this exact format:\n{\n    \"score\": [0-10],\n    \"commentary\": \"Detailed feedback on their pronunciation and translation accuracy, including specific suggestions for improvement\",\n    \"stop\": false\n}\n\nIMPORTANT: Your response must be valid JSON only. Do not include any text outside the JSON object.`;\n\n                    if (this.options.loggingVerbosity >= 8) {\n                        this.log(8, '📤 Sending prompt to ChatGPT:');\n                        this.log(8, '------- PROMPT START -------');\n                        this.log(8, prompt);\n                        this.log(8, '------- PROMPT END -------');\n                    }\n                    \n                    // Configure session with dynamic language instructions and custom VAD\n                    this.ws.send(JSON.stringify({\n                        type: 'session.update',\n                        session: {\n                            modalities: ['text'],\n                            instructions: prompt,\n                            input_audio_format: 'pcm16',\n                            input_audio_transcription: {\n                                model: 'whisper-1'\n                            },\n                            turn_detection: {\n                                type: 'server_vad',\n                                threshold: this.options.vad.threshold,\n                                prefix_padding_ms: this.options.vad.prefixPaddingMs,\n                                silence_duration_ms: this.options.vad.silenceDurationMs\n                            }\n                        }\n                    }));\n                    \n                    // Start audio recording\n                    await this.startRecording();\n                    \n                    // Check if this is a brand new phrase (zero correct answers in history)\n                    const correctAnswers = recentResults.reduce((sum, result) => sum + result, 0);\n                    const isNewPhrase = correctAnswers === 0;\n                    if (isNewPhrase ) {\n                        // For completely new phrases, introduce them properly\n                        this.showStatus(`🎵 New phrase! Listen to this ${this.sourceLanguage} phrase...`);\n                        this.pauseListening();\n                        await this.speakText(sourceText, this.sourceLanguage);\n                        \n                        this.showStatus(`🎵 Now here's how to say it in ${this.targetLanguage}...`);\n                        await this.speakText(targetText, this.targetLanguage);\n                        // repeat it\n                        // Pause for 1 second (1000 milliseconds)\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n\n                        await this.speakText(targetText, this.targetLanguage);\n                        \n                        this.showStatus(`🎤 Now you try! Say it in ${this.targetLanguage}...`);\n                        \n                        // Play notification bleep before resuming listening\n                        await this.playNotificationBleep();\n                        this.resumeListening();\n                    } else {\n                        // Regular flow for phrases with some history\n                        this.showStatus(`🎵 Listen to this ${this.sourceLanguage} phrase...`);\n                        this.pauseListening();\n                        await this.speakText(sourceText, this.sourceLanguage);\n                        \n                        // Check if we should play an audio hint\n                        if (this.options.enableAudioHints && this.shouldPlayHint(targetText, recentResults)) {\n                            try {\n                                this.showStatus(\"🎯 Here is a hint for you...\");\n                                this.log(6, '🎯 Playing audio hint for struggling phrase');\n                                await this.playAudioHint(targetText);\n                                await new Promise(resolve => setTimeout(resolve, 500)); // Brief pause after hint\n                            } catch (error) {\n                                this.log(4, '⚠️ Audio hint failed:', error);\n                                // Continue with normal flow even if hint fails\n                            }\n                        }\n                        \n                        this.showStatus(`🎤 Now say it in ${this.targetLanguage}...`);\n                        \n                        // Play notification bleep before resuming listening\n                        await this.playNotificationBleep();\n                        this.resumeListening();\n                    }\n                    \n                    // Set silence timer\n                    silenceTimer = setTimeout(() => {\n                        if (!hasResponse) {\n                            this.log(4, '⏰ Silence timeout reached');\n                            this.cleanup();\n                            resolve({\n                                score: 0,\n                                commentary: 'No response detected within the time limit. Please try speaking closer to the microphone or check your audio settings.',\n                                stop: false\n                            });\n                        }\n                    }, waitTime * 1000);\n                };\n                \n                this.ws.onmessage = async (event) => {\n                    const message = JSON.parse(event.data);\n                    this.log(8, '📨 Received message:', message.type);\n                    \n                    // Debug: Log full message for important types\n                    if (['response.done', 'error', 'response.text.delta'].includes(message.type)) {\n                        this.log(9, '📋 Full message details:', message);\n                    }\n                    \n                    if (message.type === 'session.updated') {\n                        this.log(6, '✅ Session configured successfully');\n                    }\n                    \n                    if (message.type === 'input_audio_buffer.speech_started') {\n                        this.log(6, '🎤 Speech detected, user started speaking');\n                        clearTimeout(silenceTimer);\n                    }\n                    \n                    if (message.type === 'input_audio_buffer.speech_stopped') {\n                        this.log(6, '🔇 Speech stopped, processing...');\n                    }\n                    \n                    if (message.type === 'response.done') {\n                        this.log(5, '✅ Response complete from ChatGPT');\n                        hasResponse = true;\n                        clearTimeout(silenceTimer);\n                        \n                        // Extract response from ChatGPT\n                        const response = message.response;\n                        let result = {\n                            score: 0,\n                            commentary: 'Unable to process response',\n                            stop: false\n                        };\n                        \n                        this.log(6, '🔍 Processing ChatGPT response...');\n                        this.log(9, '📥 Raw response object:', JSON.stringify(response, null, 2));\n                        \n                        if (response.output && response.output.length > 0) {\n                            for (const output of response.output) {\n                                this.log(8, '📄 Processing output item:', output);\n                                if (output.content && output.content.length > 0) {\n                                    for (const content of output.content) {\n                                        if (content.type === 'text' && content.text) {\n                                            if (this.options.loggingVerbosity >= 7) {\n                                                this.log(7, '📥 Raw ChatGPT response text:');\n                                                this.log(7, '------- RESPONSE START -------');\n                                                this.log(7, content.text);\n                                                this.log(7, '------- RESPONSE END -------');\n                                            }\n                                            \n                                            try {\n                                                const parsed = JSON.parse(content.text);\n                                                this.log(6, '✅ Successfully parsed JSON response:', parsed);\n                                                \n                                                result = {\n                                                    score: parseInt(parsed.score) || 0,\n                                                    commentary: parsed.commentary || 'No commentary provided',\n                                                    stop: Boolean(parsed.stop)\n                                                };\n                                                this.log(5, '📊 Processed result:', result);\n                                            } catch (e) {\n                                                this.logWarn(4, '❌ Failed to parse JSON response, attempting fallback parsing');\n                                                this.logWarn(6, 'Parse error:', e.message);\n                                                \n                                                // Fallback parsing for malformed JSON\n                                                const scoreMatch = content.text.match(/score[\"\\s]*:[\"\\s]*(\\d+)/i);\n                                                const stopMatch = content.text.toLowerCase().includes('stop') || \n                                                                content.text.toLowerCase().includes('pause') ||\n                                                                content.text.toLowerCase().includes('enough');\n                                                \n                                                result = {\n                                                    score: scoreMatch ? parseInt(scoreMatch[1]) : 0,\n                                                    commentary: content.text,\n                                                    stop: stopMatch\n                                                };\n                                                this.log(5, '🔧 Fallback parsed result:', result);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            this.logWarn(3, '⚠️ No output found in ChatGPT response');\n                        }\n                        \n                        // If user requested to stop, clean up and return immediately\n                        if (result.stop) {\n                            this.log(4, '🛑 User requested to stop');\n                            this.cleanup();\n                            resolve(result);\n                            return;\n                        }\n                        \n                        // Show score feedback and potentially play target pronunciation\n                        this.showStatus('Test complete!');\n                        const scoreInfo = this.showScore(result.score);\n                        \n                        // Speak target language if score is below or equal to configured threshold\n                        if (result.score > 0 && result.score <= this.options.feedbackThreshold) {\n                            this.log(5, `📢 Score ${result.score} below threshold ${this.options.feedbackThreshold}, speaking ${this.targetLanguage} target phrase...`);\n                            \n                            const wasListening = this.isListening;\n                            if (wasListening) this.pauseListening();\n                            \n                            // For very poor scores (< 3), repeat the phrase 3 times\n                            if (result.score < 3) {\n                                this.log(4, `🔁 Score ${result.score} is very low, repeating target phrase 3 times for better learning`);\n                                this.showStatus(`🎵 Score ${result.score}/10 - Here's the ${this.targetLanguage} pronunciation (3 times)...`);\n                                \n                                for (let i = 1; i <= 3; i++) {\n                                    this.log(6, `🎵 Playing repetition ${i}/3`);\n                                    await this.speakText(targetText, this.targetLanguage);\n                                    \n                                    // Short pause between repetitions (except after the last one)\n                                    if (i < 3) {\n                                        await new Promise(resolve => setTimeout(resolve, 800));\n                                    }\n                                }\n                            } else {\n                                // Normal single playback for scores 3-6 (below threshold but not terrible)\n                                this.showStatus(`🎵 Here's the ${this.targetLanguage} pronunciation...`);\n                                await this.speakText(targetText, this.targetLanguage);\n                            }\n                            \n                            if (wasListening) this.resumeListening();\n                        }\n                        \n                        this.log(4, '📊 Final result returned:', result);\n                        this.cleanup();\n                        resolve(result);\n                    }\n                    \n                    if (message.type === 'error') {\n                        this.logError(2, '❌ ChatGPT WebSocket error:', message.error);\n                        this.log(8, '💥 Full error details:', JSON.stringify(message, null, 2));\n                        this.showError('Error: ' + message.error.message);\n                        this.cleanup();\n                        resolve({\n                            score: 0,\n                            commentary: `Error occurred: ${message.error.message}`,\n                            stop: false\n                        });\n                    }\n                };\n                \n                this.ws.onerror = (error) => {\n                    this.logError(2, '❌ WebSocket connection error:', error);\n                    this.showError('Connection error occurred');\n                    this.cleanup();\n                    resolve({\n                        score: 0,\n                        commentary: 'Connection error occurred. Please check your internet connection and try again.',\n                        stop: false\n                    });\n                };\n            });\n            \n        } catch (error) {\n            this.logError(1, '💥 Error in test method:', error);\n            this.log(8, '🔍 Error stack trace:', error.stack);\n            this.showError('Error: ' + error.message);\n            return {\n                score: 0,\n                commentary: `Error occurred: ${error.message}`,\n                stop: false\n            };\n        }\n    }\n    \n    cleanup() {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.log(5, '🔌 Closing ChatGPT WebSocket connection');\n            this.ws.close();\n            this.ws = null;\n        }\n        this.stopRecording();\n    }\n    \n    // ========== LIFECYCLE MANAGEMENT ==========\n    destroy() {\n        this.log(4, '🧹 Destroying LanguageTutor instance');\n        this.cleanup();\n        this.stopKeyRefreshTimer();\n    }\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","// settingsStore.js - Centralised settings management with localStorage persistence\nimport { writable } from 'svelte/store';\n\n// Default settings\nconst defaultSettings = {\n  // Language Configuration\n  nativeLanguage: 'English',\n  learningLanguage: 'Italian',\n  \n  // Display Options\n  showExpectedOutput: 'always', // 'always', 'never', 'struggling'\n  showCategory: true,\n  showFeedback: true,\n  showUpcomingQueue: false,\n  enableAudioHints: false,\n  \n  // Audio & Timing Controls\n  translationThreshold: 7,\n  pauseBetweenTests: 3,\n  pauseWhenStruggling: 5,\n  \n  // Binary Algorithm Controls\n  passThreshold: 7,\n  repetitivenessFactor: 5,\n  \n  // Developer Settings\n  loggingVerbosity: 5,\n  showDeveloperSettings: false,\n  \n  // Category Preferences\n  enabledCategories: {}\n};\n\nfunction createSettingsStore() {\n  const { subscribe, set, update } = writable(defaultSettings);\n  \n  return {\n    subscribe,\n    \n    // Load settings from localStorage\n    load: () => {\n      if (typeof localStorage === 'undefined') return;\n      \n      const saved = localStorage.getItem('languageTutorSettings');\n      if (saved) {\n        try {\n          const parsedSettings = JSON.parse(saved);\n          update(current => ({ ...current, ...parsedSettings }));\n          console.log('✅ Settings loaded from localStorage');\n        } catch (error) {\n          console.error('❌ Failed to parse saved settings:', error);\n        }\n      }\n    },\n    \n    // Save settings to localStorage\n    save: (settings) => {\n      if (typeof localStorage === 'undefined') return;\n      \n      try {\n        localStorage.setItem('languageTutorSettings', JSON.stringify(settings));\n        console.log('💾 Settings saved to localStorage');\n      } catch (error) {\n        console.error('❌ Failed to save settings:', error);\n      }\n    },\n    \n    // Update specific setting\n    updateSetting: (key, value) => {\n      update(current => {\n        const newSettings = { ...current, [key]: value };\n        \n        // Auto-save to localStorage\n        if (typeof localStorage !== 'undefined') {\n          try {\n            localStorage.setItem('languageTutorSettings', JSON.stringify(newSettings));\n          } catch (error) {\n            console.error('❌ Failed to save setting:', error);\n          }\n        }\n        \n        return newSettings;\n      });\n    },\n    \n    // Update multiple settings at once\n    updateSettings: (updates) => {\n      update(current => {\n        const newSettings = { ...current, ...updates };\n        \n        // Auto-save to localStorage\n        if (typeof localStorage !== 'undefined') {\n          try {\n            localStorage.setItem('languageTutorSettings', JSON.stringify(newSettings));\n          } catch (error) {\n            console.error('❌ Failed to save settings:', error);\n          }\n        }\n        \n        return newSettings;\n      });\n    },\n    \n    // Reset to defaults\n    reset: () => {\n      set(defaultSettings);\n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem('languageTutorSettings');\n      }\n    }\n  };\n}\n\nexport const settings = createSettingsStore();\n","// autoSave.js - Reusable Svelte action for auto-saving settings to localStorage\n\nexport function autoSave(node, settingName) {\n  function handleChange(event) {\n    const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n    \n    if (settingName && typeof localStorage !== 'undefined') {\n      try {\n        const saved = localStorage.getItem('languageTutorSettings');\n        const settings = saved ? JSON.parse(saved) : {};\n        settings[settingName] = value;\n        localStorage.setItem('languageTutorSettings', JSON.stringify(settings));\n        console.log(`💾 Saved ${settingName}:`, value);\n      } catch (error) {\n        console.error(`Failed to save ${settingName}:`, error);\n      }\n    }\n  }\n  \n  node.addEventListener('change', handleChange);\n  \n  return {\n    destroy() {\n      node.removeEventListener('change', handleChange);\n    }\n  };\n}","<!-- LanguageSettings.svelte -->\n<script>\n  import { createEventDispatcher } from 'svelte';\n  import { autoSave } from './autoSave.js';\n  \n  export let nativeLanguage;\n  export let learningLanguage;\n  export let nativeLanguages;\n  export let learningLanguages;\n  export let loggingVerbosity = 5;\n  \n  const dispatch = createEventDispatcher();\n  \n  function log(level, ...args) {\n    if (loggingVerbosity >= level) {\n      console.log(...args);\n    }\n  }\n  \n</script>\n\n<h3 class=\"section-header\">Language Selection</h3>\n<div class=\"language-grid\">\n  <div class=\"form-group\">\n    <label class=\"form-label\">Native Language</label>\n    <select \n      class=\"form-select\" \n      bind:value={nativeLanguage}\n      use:autoSave={\"nativeLanguage\"}\n    >\n      {#each nativeLanguages as lang}\n        <option value={lang}>\n          {lang}\n        </option>\n      {/each}\n    </select>\n  </div>\n\n  <div class=\"form-group\">\n    <label class=\"form-label\">Learning Language</label>\n    <select \n      class=\"form-select\" \n      bind:value={learningLanguage}\n      use:autoSave={\"learningLanguage\"}\n    >\n      {#each learningLanguages as lang}\n        <option value={lang}>\n          {lang}\n        </option>\n      {/each}\n    </select>\n  </div>\n</div>\n\n","<!-- DisplaySettings.svelte -->\n<script>\n  import { createEventDispatcher } from 'svelte';\n  import { autoSave } from './autoSave.js';\n  \n  export let showExpectedOutput;\n  export let showCategory;\n  export let showFeedback;\n  export let showUpcomingQueue;\n  export let enableAudioHints;\n  export let translationThreshold;\n  export let pauseBetweenTests;\n  export let pauseWhenStruggling;\n  \n  const dispatch = createEventDispatcher();\n  \n  function updateQueue() {\n    dispatch('updateQueue');\n  }\n  \n</script>\n\n<h3 class=\"section-header\">Display Options</h3>\n<div class=\"display-options-section\">\n  <div class=\"display-options-list\">\n    <label class=\"category-item\">\n      <input \n        type=\"checkbox\" \n        class=\"category-checkbox\"\n        bind:checked={showCategory}\n        use:autoSave={\"showCategory\"}\n      />\n      <span class=\"category-label\">Display Category</span>\n    </label>\n    <label class=\"category-item\">\n      <input \n        type=\"checkbox\" \n        class=\"category-checkbox\"\n        bind:checked={showFeedback}\n        use:autoSave={\"showFeedback\"}\n      />\n      <span class=\"category-label\">Display Feedback</span>\n    </label>\n    <label class=\"category-item\">\n      <input \n        type=\"checkbox\" \n        class=\"category-checkbox\"\n        bind:checked={showUpcomingQueue}\n        on:change={updateQueue}\n        use:autoSave={\"showUpcomingQueue\"}\n      />\n      <span class=\"category-label\">Show Upcoming Queue</span>\n    </label>\n    <label class=\"category-item\">\n      <input \n        type=\"checkbox\" \n        class=\"category-checkbox\"\n        bind:checked={enableAudioHints}\n        use:autoSave={\"enableAudioHints\"}\n      />\n      <span class=\"category-label\">Enable Audio Hints</span>\n    </label>\n  </div>\n  \n  <!-- Expected Output Display Options -->\n  <div class=\"form-group expected-translation-section\">\n    <label class=\"form-label\" for=\"expected-output-select\">Show Expected Translation</label>\n    <select \n      id=\"expected-output-select\"\n      class=\"form-select\" \n      bind:value={showExpectedOutput}\n      use:autoSave={\"showExpectedOutput\"}\n    >\n      <option value=\"always\">Always</option>\n      <option value=\"struggling\">Only when struggling</option>\n      <option value=\"never\">Never</option>\n    </select>\n    <p class=\"setting-description\">\n      {#if showExpectedOutput === 'always'}\n        Expected translation is always shown\n      {:else if showExpectedOutput === 'never'}\n        Expected translation is never shown - test your memory!\n      {:else if showExpectedOutput === 'struggling'}\n        Expected translation shown only for phrases with success rate below 25%\n      {/if}\n    </p>\n  </div>\n  \n  <!-- Translation Threshold Setting -->\n  <div class=\"threshold-setting\">\n    <label class=\"form-label\">\n      Translation Repetition Threshold: {translationThreshold}\n      <span class=\"threshold-description\">\n        {translationThreshold === 0 ? 'Never repeat translation' : \n         translationThreshold === 10 ? 'Always repeat translation' : \n         `Repeat translation for scores below ${translationThreshold}`}\n      </span>\n    </label>\n    <input \n      type=\"range\" \n      min=\"0\" \n      max=\"10\" \n      step=\"1\"\n      bind:value={translationThreshold}\n      class=\"threshold-slider\"\n      use:autoSave={\"translationThreshold\"}\n    />\n    <div class=\"threshold-labels\">\n      <span>Never (0)</span>\n      <span>Default (7)</span>\n      <span>Always (10)</span>\n    </div>\n  </div>\n  \n  <!-- Pause Between Tests Setting -->\n  <div class=\"threshold-setting\">\n    <label class=\"form-label\">\n      Pause Between Tests: {pauseBetweenTests}s\n      <span class=\"threshold-description\">\n        {pauseBetweenTests <= 1 ? 'Quick - brief pause for score review' :\n         pauseBetweenTests >= 5 ? 'Slow - plenty of time to read feedback' :\n         'Balanced - comfortable time to review your score'}\n      </span>\n    </label>\n    <input \n      type=\"range\" \n      min=\"0.5\" \n      max=\"10\" \n      step=\"0.5\"\n      bind:value={pauseBetweenTests}\n      class=\"threshold-slider\"\n      use:autoSave={\"pauseBetweenTests\"}\n    />\n    <div class=\"threshold-labels\">\n      <span>Quick (0.5s)</span>\n      <span>Default (3s)</span>\n      <span>Slow (10s)</span>\n    </div>\n  </div>\n  \n  <!-- Pause When Struggling Setting -->\n  {#if showExpectedOutput === 'struggling'}\n    <div class=\"threshold-setting\">\n    <label class=\"form-label\">\n      Pause When Struggling: {pauseWhenStruggling}s\n      <span class=\"threshold-description\">\n        Extra pause time for phrases with low success rate (&lt;25%) or poor scores (&lt;4)\n      </span>\n    </label>\n    <input \n      type=\"range\" \n      min=\"0.5\" \n      max=\"15\" \n      step=\"0.5\"\n      bind:value={pauseWhenStruggling}\n      class=\"threshold-slider\"\n      use:autoSave={\"pauseWhenStruggling\"}\n    />\n    <div class=\"threshold-labels\">\n      <span>Quick (0.5s)</span>\n      <span>Default (5s)</span>\n      <span>Extended (15s)</span>\n    </div>\n    </div>\n  {/if}\n</div>\n\n<style>\n  /* Component-specific styles for DisplaySettings */\n  .display-options-list {\n    margin-top: 0.5rem;\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 0.5rem;\n  }\n  \n  @media (min-width: 640px) {\n    .display-options-list {\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n  \n  /* Fieldset and legend styling */\n  fieldset {\n    border: none;\n    padding: 0;\n    margin: 0;\n  }\n  \n  legend {\n    padding: 0;\n    margin-bottom: 0.5rem;\n  }\n  \n  .expected-translation-section {\n    margin-top: 1.5rem;\n    margin-bottom: 1.5rem;\n  }\n</style>\n","<!-- AlgorithmSettings.svelte -->\n<script>\n  export let passThreshold;\n  export let repetitivenessFactor;\n</script>\n\n<div class=\"algorithm-settings\">\n  <h3 class=\"section-header\">Learning Algorithm</h3>\n  <div class=\"threshold-setting\">\n    <label class=\"form-label\">\n      Pass Threshold: {passThreshold}\n      <span class=\"threshold-description\">\n        Scores {passThreshold} and above are considered a pass\n      </span>\n    </label>\n    <input \n      type=\"range\" \n      min=\"1\" \n      max=\"10\" \n      step=\"1\"\n      bind:value={passThreshold}\n      class=\"threshold-slider\"\n    />\n    <div class=\"threshold-labels\">\n      <span>Easy (1)</span>\n      <span>Default (7)</span>\n      <span>Hard (10)</span>\n    </div>\n  </div>\n  \n  <div class=\"threshold-setting\">\n    <label class=\"form-label\">\n      Test Repetitiveness: {repetitivenessFactor}\n      <span class=\"threshold-description\">\n        {repetitivenessFactor <= 3 ? 'Less repetitive - tests advance quickly' :\n         repetitivenessFactor >= 8 ? 'Very repetitive - tests stay at front longer' :\n         'Balanced repetition'}\n      </span>\n    </label>\n    <input \n      type=\"range\" \n      min=\"1\" \n      max=\"10\" \n      step=\"1\"\n      bind:value={repetitivenessFactor}\n      class=\"threshold-slider\"\n    />\n    <div class=\"threshold-labels\">\n      <span>Less (1)</span>\n      <span>Default (5)</span>\n      <span>More (10)</span>\n    </div>\n  </div>\n</div>\n\n<style>\n  /* Component-specific styles for AlgorithmSettings */\n  .algorithm-settings {\n    margin-top: 1rem;\n  }\n</style>\n","<!-- CategoryManager.svelte -->\n<script>\n  import { createEventDispatcher } from 'svelte';\n  import { settings } from './settingsStore.js';\n  \n  export let categories;\n  export let enabledCategories;\n  export let loggingVerbosity = 5;\n  \n  const dispatch = createEventDispatcher();\n  \n  function log(level, ...args) {\n    if (loggingVerbosity >= level) {\n      console.log(...args);\n    }\n  }\n  \n  function handleCategoryToggle(category, enabled) {\n    log(6, `🔘 Category toggle: ${category} → ${enabled}`);\n    \n    // Update the bound enabledCategories object directly\n    enabledCategories[category] = enabled;\n    // Force reactivity by creating new object reference\n    enabledCategories = { ...enabledCategories };\n    \n    // Save to localStorage (matching the autoSave pattern)\n    if (typeof localStorage !== 'undefined') {\n      try {\n        const saved = localStorage.getItem('languageTutorSettings');\n        const settings = saved ? JSON.parse(saved) : {};\n        if (!settings.enabledCategories) settings.enabledCategories = {};\n        settings.enabledCategories[category] = enabled;\n        localStorage.setItem('languageTutorSettings', JSON.stringify(settings));\n        console.log(`💾 Saved category ${category}:`, enabled);\n      } catch (error) {\n        console.error(`Failed to save category ${category}:`, error);\n      }\n    }\n    \n    // Dispatch change for LearningQueue updates only\n    dispatch('categoryChange', { category, enabled });\n  }\n</script>\n\n{#if categories.length > 0}\n  <h3 class=\"section-header\">Learning Categories</h3>\n  <div class=\"categories-section\">\n    <div class=\"categories-list\">\n      {#each categories as category}\n        <label class=\"category-item\">\n          <input \n            type=\"checkbox\" \n            class=\"category-checkbox\"\n            checked={enabledCategories[category] || false}\n            on:change={(e) => handleCategoryToggle(category, e.target.checked)}\n          />\n          <span class=\"category-label\">{category}</span>\n        </label>\n      {/each}\n    </div>\n    \n    <!-- Validation Message -->\n    {#if !Object.values(enabledCategories).some(enabled => enabled)}\n      <div class=\"error-text\">\n        At least one category must be enabled to start learning!\n      </div>\n    {/if}\n\n<style>\n  /* Component-specific styles for CategoryManager */\n  .categories-section {\n    margin-top: 1rem;\n  }\n  \n  .categories-list {\n    margin-top: 0.5rem;\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 0.5rem;\n  }\n  \n  @media (min-width: 640px) {\n    .categories-list {\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n  \n  /* Fieldset styling for categories */\n  fieldset {\n    border: none;\n    padding: 0;\n    margin: 0;\n  }\n  \n  legend {\n    padding: 0;\n    margin-bottom: 0.5rem;\n  }\n</style>\n  </div>\n{/if}\n","<!-- DeveloperSettings.svelte -->\n<script>\n  export let showDeveloperSettings;\n  export let loggingVerbosity;\n  \n  import { createEventDispatcher } from 'svelte';\n  const dispatch = createEventDispatcher();\n</script>\n\n{#if showDeveloperSettings}\n  <div class=\"developer-settings\">\n    <h3 class=\"section-header\">🛠️ Developer Settings</h3>\n    <div class=\"threshold-setting developer-setting\">\n      <label class=\"form-label\">\n        Console Logging Verbosity: {loggingVerbosity}\n        <span class=\"threshold-description\">\n          {loggingVerbosity === 0 ? 'Silent - no console output' :\n           loggingVerbosity <= 3 ? 'Quiet - errors and warnings only' :\n           loggingVerbosity <= 6 ? 'Normal - important events' :\n           'Verbose - detailed debugging info'}\n        </span>\n      </label>\n      <input \n        type=\"range\" \n        min=\"0\" \n        max=\"10\" \n        step=\"1\"\n        bind:value={loggingVerbosity}\n        class=\"threshold-slider\"\n      />\n      <div class=\"threshold-labels\">\n        <span>Silent (0)</span>\n        <span>Default (5)</span>\n        <span>Verbose (10)</span>\n      </div>\n      \n      <!-- Debug Testing Buttons -->\n      <div class=\"debug-buttons\">\n        <button \n          class=\"debug-btn pass-btn\"\n          on:click={() => dispatch('debugTest', { action: 'pass' })}\n        >\n          ✅ Pass Next Test\n        </button>\n        <button \n          class=\"debug-btn fail-btn\"\n          on:click={() => dispatch('debugTest', { action: 'fail' })}\n        >\n          ❌ Fail Next Test\n        </button>\n      </div>\n    </div>\n  </div>\n{/if}\n\n<style>\n  /* Component-specific styles for DeveloperSettings */\n  .developer-settings {\n    margin-top: 1.5rem;\n  }\n  \n  .developer-setting {\n    border: 2px dashed #8b5cf6;\n    background: rgba(139, 92, 246, 0.05);\n    border-radius: 0.5rem;\n    padding: 1rem;\n    margin-top: 1rem;\n  }\n  \n  .debug-buttons {\n    display: flex;\n    gap: 0.5rem;\n    margin-top: 1rem;\n  }\n  \n  .debug-btn {\n    padding: 0.5rem 1rem;\n    border: none;\n    border-radius: 0.375rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s;\n    flex: 1;\n  }\n  \n  .pass-btn {\n    background: #10b981;\n    color: white;\n  }\n  \n  .pass-btn:hover {\n    background: #059669;\n  }\n  \n  .fail-btn {\n    background: #ef4444;\n    color: white;\n  }\n  \n  .fail-btn:hover {\n    background: #dc2626;\n  }\n</style>","<!-- LearningSession.svelte -->\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  export let currentPhrase;\n  export let status;\n  export let isLearning;\n  export let canStart;\n  export let showCategory;\n  export let showFeedback;\n  export let showExpectedOutput;\n  export let enableAudioHints;\n  export let nativeLanguage;\n  export let learningLanguage;\n  \n  const dispatch = createEventDispatcher();\n  \n  function shouldShowExpectedOutput(phrase) {\n    if (showExpectedOutput === 'always') return true;\n    if (showExpectedOutput === 'never') return false;\n    if (showExpectedOutput === 'struggling') {\n      if (!phrase.recentResults || phrase.recentResults.length === 0) {\n        return true; // Show for new phrases with no history\n      }\n      const successCount = phrase.recentResults.filter(r => r === 1).length;\n      const successRate = successCount / phrase.recentResults.length;\n      return successRate < 0.25;\n    }\n    return true; // Default fallback\n  }\n  \n  function shouldShowAudioHint(phrase) {\n    if (!enableAudioHints || !phrase.recentResults || phrase.recentResults.length === 0) {\n      return false;\n    }\n    \n    const successCount = phrase.recentResults.filter(r => r === 1).length;\n    const successRate = successCount / phrase.recentResults.length;\n    \n    // Show hint if: has some correct attempts (> 0) but success rate is less than 50%\n    return successCount > 0 && successRate < 0.5;\n  }\n  \n  function handleStartStop() {\n    dispatch('startStop');\n  }\n</script>\n\n<!-- Current Phrase Display -->\n<div class=\"phrase-display\">\n  {#if currentPhrase}\n    <div class=\"phrase-content\">\n      {#if showCategory}\n        <p class=\"phrase-category\">Category: {currentPhrase.category}</p>\n      {/if}\n      <p class=\"phrase-label\">Translate this:</p>\n      <p class=\"phrase-text\">{currentPhrase.source}</p>\n      {#if shouldShowExpectedOutput(currentPhrase)}\n        <p class=\"expected-text\">Expected: {currentPhrase.target}</p>\n      {/if}\n    </div>\n  {:else}\n    <p class=\"placeholder-text\">Ready to start learning</p>\n  {/if}\n</div>\n\n<!-- Status Area -->\n<div class=\"status-area\">\n  {#if showFeedback}\n    <p class=\"status-text\">{status}</p>\n  {:else if currentPhrase && shouldShowAudioHint(currentPhrase)}\n    <p class=\"status-text\">🎯 Here is a hint for you</p>\n  {:else if isLearning}\n    <p class=\"status-text\">Listening...</p>\n  {:else}\n    <p class=\"status-text\">Ready to start learning!</p>\n  {/if}\n</div>\n\n<!-- Start/Stop Button -->\n<div class=\"button-container\">\n  <button \n    class=\"start-stop-btn {isLearning ? 'stop-btn' : 'start-btn'}\"\n    disabled={!canStart && !isLearning}\n    on:click={handleStartStop}\n  >\n    <span class=\"btn-icon\">{isLearning ? '⏹️' : '▶️'}</span>\n    {isLearning ? 'Stop Learning' : 'Start Learning'}\n  </button>\n</div>\n","<!-- QueueDisplay.svelte -->\n<script>\n  export let showUpcomingQueue;\n  export let upcomingQueue;\n</script>\n\n{#if showUpcomingQueue && upcomingQueue.length > 0}\n  <div class=\"queue-section\">\n    <h3 class=\"queue-title\">Complete Learning Queue ({upcomingQueue.length} items)</h3>\n    <div class=\"queue-list\">\n      {#each upcomingQueue as item}\n        <div class=\"queue-item\" class:current={item.position === 1}>\n          <span class=\"queue-position\">#{item.position}</span>\n          <span class=\"queue-text\">{item.source}</span>\n          <span class=\"queue-category\">{item.category}</span>\n          <span class=\"queue-success-rate\" class:struggling={item.successRate < 0.3} class:mastered={item.successRate > 0.7}>\n            {item.recentResults.length === 0 ? 'New' : `${(item.successRate * 100).toFixed(0)}%`}\n          </span>\n          <span class=\"queue-success-count\">\n            {item.recentResults.filter(r => r).length}/{item.recentResults.length}\n          </span>\n        </div>\n      {/each}\n    </div>\n  </div>\n{/if}\n","<!-- App-Refactored.svelte - Complete and Untruncated! -->\n<script>\n  import { onMount } from 'svelte';\n  import { LearningQueue } from './LearningQueue.js';\n  import { LanguageTutor } from './LanguageTutor.js';\n  import { settings } from './settingsStore.js';\n  \n  // Import our lovely new components\n  import LanguageSettings from './LanguageSettings.svelte';\n  import DisplaySettings from './DisplaySettings.svelte';\n  import AlgorithmSettings from './AlgorithmSettings.svelte';\n  import CategoryManager from './CategoryManager.svelte';\n  import DeveloperSettings from './DeveloperSettings.svelte';\n  import LearningSession from './LearningSession.svelte';\n  import QueueDisplay from './QueueDisplay.svelte';\n  \n  // Core application state\n  let showSettings = false;\n  let isLearning = false;\n  let currentPhrase = null;\n  let status = \"Ready to start learning!\";\n  let learningQueue = null;\n  let tutor = null;\n  let categories = [];\n  let upcomingQueue = [];\n  let isInitialized = false;\n  \n  // Settings from store\n  let currentSettings = {};\n  \n  // Subscribe to settings store\n  let previousNativeLanguage = '';\n  let previousLearningLanguage = '';\n  \n  settings.subscribe(value => {\n    const oldSettings = currentSettings;\n    currentSettings = value;\n    \n    // Update systems only when language settings change (not other settings)\n    if (isInitialized && (\n      oldSettings.nativeLanguage !== value.nativeLanguage ||\n      oldSettings.learningLanguage !== value.learningLanguage\n    )) {\n      updateSystems();\n    }\n  });\n  \n  const languageOptions = {\n    'English': ['Italian', 'Spanish']\n    // Future: 'Spanish': ['English'], 'French': ['English', 'German'], etc.\n  };\n  \n  // Derive arrays from the hash\n  const nativeLanguages = Object.keys(languageOptions);\n  $: learningLanguages = languageOptions[currentSettings.nativeLanguage] || [];\n  \n  // Reactive computed values\n  $: canStart = Object.values(currentSettings.enabledCategories).some(enabled => enabled) &&\n                categories.length > 0;\n  \n  // Reactive updates for tutor and queue options (but not during language changes)\n  $: if (tutor && currentSettings.loggingVerbosity !== undefined && tutor.options) {\n    tutor.updateOptions({ loggingVerbosity: currentSettings.loggingVerbosity });\n  }\n  \n  $: if (learningQueue && currentSettings.loggingVerbosity !== undefined && learningQueue.options) {\n    learningQueue.updateOptions({ loggingVerbosity: currentSettings.loggingVerbosity });\n  }\n  \n  $: if (learningQueue && currentSettings.repetitivenessFactor !== undefined && learningQueue.options) {\n    learningQueue.updateOptions({ repetitivenessFactor: currentSettings.repetitivenessFactor });\n  }\n  \n  $: if (learningQueue && currentSettings.passThreshold !== undefined && learningQueue.options) {\n    learningQueue.updateOptions({ passThreshold: currentSettings.passThreshold });\n  }\n  \n  \n  // ========== LOGGING SYSTEM ==========\n  function log(level, ...args) {\n    if (currentSettings.loggingVerbosity >= level) {\n      console.log(...args);\n    }\n  }\n  \n  function logError(level, ...args) {\n    if (currentSettings.loggingVerbosity >= level) {\n      console.error(...args);\n    }\n  }\n  \n  function logWarn(level, ...args) {\n    if (currentSettings.loggingVerbosity >= level) {\n      console.warn(...args);\n    }\n  }\n  \n  // ========== LIFECYCLE ==========\n  onMount(async () => {\n    log(4, '🚀 App mounted, loading settings...');\n    \n    // Load settings from localStorage\n    settings.load();\n    \n    // Wait a tick for settings to propagate\n    await new Promise(resolve => setTimeout(resolve, 0));\n    \n    // Initialize systems\n    await initializeSystems();\n    \n    isInitialized = true;\n    log(4, '🎉 App initialization complete');\n  });\n  \n  // ========== SYSTEM INITIALIZATION ==========\n  async function initializeSystems() {\n    await initializeLearningQueue();\n    initializeTutor();\n  }\n  \n  async function updateSystems() {\n    // Reinitialize when core settings change\n    if (learningQueue || tutor) {\n      await initializeLearningQueue();\n      initializeTutor();\n    }\n  }\n  \n  async function initializeLearningQueue() {\n    log(5, '🏗️ Initializing LearningQueue for:', currentSettings.nativeLanguage, '→', currentSettings.learningLanguage);\n    \n    categories = [];\n    \n    learningQueue = new LearningQueue(\n      currentSettings.nativeLanguage, \n      currentSettings.learningLanguage, \n      'basic', \n      'learning/', \n      {\n        passThreshold: currentSettings.passThreshold,\n        memoryLength: 20,\n        repetitivenessFactor: currentSettings.repetitivenessFactor\n      }\n    );\n    \n    await learningQueue.init();\n    \n    const availableCategories = learningQueue.getCategories();\n    categories = availableCategories;\n    \n    // Restore or initialize category preferences\n    const newEnabledCategories = {};\n    availableCategories.forEach(category => {\n      newEnabledCategories[category] = currentSettings.enabledCategories[category] ?? true;\n      learningQueue.setCategory(category, newEnabledCategories[category]);\n    });\n    \n    settings.updateSetting('enabledCategories', newEnabledCategories);\n    updateUpcomingQueue();\n    \n    log(5, '✅ LearningQueue initialization complete');\n  }\n  \n  function initializeTutor() {\n    tutor = new LanguageTutor(null, currentSettings.nativeLanguage, currentSettings.learningLanguage, {\n      apiKeyEndpoint: 'openai.php',\n      feedbackThreshold: currentSettings.translationThreshold,\n      loggingVerbosity: currentSettings.loggingVerbosity,\n      audioPath: 'audio/',\n      enableAudioHints: currentSettings.enableAudioHints,\n      statusCallback: (message) => {\n        if (!currentSettings.showFeedback && isLearning) {\n          if (message.includes('Listen to this')) {\n            status = `Listen to the ${currentSettings.nativeLanguage} phrase...`;\n          } else if (message.includes('Now say it in')) {\n            status = `Now say it in ${currentSettings.learningLanguage}...`;\n          }\n        } else {\n          status = message;\n        }\n      }\n    });\n  }\n  \n  // ========== EVENT HANDLERS ==========\n  \n  function handleCategoryChange(event) {\n    const { category, enabled } = event.detail;\n    \n    // No need to update settings here - binding handles that automatically\n    // Just update the LearningQueue\n    if (learningQueue) {\n      learningQueue.setCategory(category, enabled);\n      updateUpcomingQueue();\n    }\n  }\n  \n  function handleDebugTest(event) {\n    const { action } = event.detail;\n    \n    if (!learningQueue) {\n      log(3, '❌ Debug test failed: no learning queue');\n      return;\n    }\n    \n    const phrase = learningQueue.getNextTest();\n    if (!phrase) {\n      log(3, '❌ Debug test failed: no phrases available');\n      return;\n    }\n    \n    // Simulate pass (score 10) or fail (score 0)\n    const score = action === 'pass' ? 10 : 0;\n    \n    log(5, `🐛 Debug ${action}: \"${phrase.source}\" → \"${phrase.target}\" (score: ${score})`);\n    \n    // Score the test directly through the learning queue\n    learningQueue.scoreCurrentTest(score);\n    updateUpcomingQueue();\n    \n    status = `Debug ${action}: \"${phrase.source}\" scored ${score}/10`;\n  }\n  \n  \n  function updateUpcomingQueue() {\n    if (learningQueue && currentSettings.showUpcomingQueue) {\n      upcomingQueue = learningQueue.getTopQueueItems();\n      log(7, '📋 Updated upcoming queue:', upcomingQueue.length, 'items');\n    }\n  }\n  \n  // ========== LEARNING SESSION ==========\n  async function startLearningSession() {\n    if (!learningQueue || !tutor) {\n      status = \"Blimey! Something's gone wrong with the initialisation.\";\n      return;\n    }\n\n    isLearning = true;\n    status = \"Right then, let's get cracking!\";\n    \n    await runLearningLoop();\n  }\n  \n  async function runLearningLoop() {\n    while (isLearning) {\n      const phrase = learningQueue.getNextTest();\n      if (!phrase) {\n        status = \"No more phrases available! Check your category settings.\";\n        stopLearningSession();\n        break;\n      }\n      \n      log(8, '📋 Got phrase from queue:', phrase);\n      log(8, '📊 Phrase recentResults:', phrase.recentResults, 'length:', phrase.recentResults?.length);\n      \n      currentPhrase = phrase;\n      status = `Ready to listen to ${currentSettings.nativeLanguage} phrase...`;\n      \n      if (!isLearning) break;\n      \n      try {\n        const result = await tutor.test(phrase.source, phrase.target, phrase.recentResults || []);\n        \n        if (result.stop || !isLearning) {\n          stopLearningSession();\n          break;\n        } else if (result.score === 0) {\n          status = `No response detected - ${result.commentary}`;\n          log(6, `⏳ Pausing ${currentSettings.pauseBetweenTests} seconds before repeating phrase`);\n          await new Promise(resolve => setTimeout(resolve, currentSettings.pauseBetweenTests * 1000));\n        } else {\n          learningQueue.scoreCurrentTest(result.score);\n          updateUpcomingQueue();\n          \n          status = `Score: ${result.score}/10 - ${result.commentary}`;\n          \n          // Use dynamic pause duration based on performance\n          const pauseDuration = getPauseDuration(phrase, result.score);\n          log(6, `⏳ Pausing ${pauseDuration} seconds before next phrase`);\n          await new Promise(resolve => setTimeout(resolve, pauseDuration * 1000));\n        }\n      } catch (error) {\n        status = \"Smeg! Something went wrong with the AI. Try again.\";\n        stopLearningSession();\n        break;\n      }\n    }\n  }\n  \n  function getPauseDuration(phrase, score) {\n    if (!phrase || !phrase.recentResults || phrase.recentResults.length === 0) {\n      return currentSettings.pauseBetweenTests;\n    }\n    \n    const successCount = phrase.recentResults.filter(r => r === 1).length;\n    const successRate = successCount / phrase.recentResults.length;\n    const isStruggling = successRate < 0.25 || score < 4;\n    \n    return isStruggling ? currentSettings.pauseWhenStruggling : currentSettings.pauseBetweenTests;\n  }\n  \n  \n  function stopLearningSession() {\n    isLearning = false;\n    if (!status.includes('Score:') && !status.includes('commentary')) {\n      status = \"Learning session stopped. Ready when you are!\";\n    }\n    currentPhrase = null;\n  }\n  \n  function handleStartStop() {\n    if (isLearning) {\n      stopLearningSession();\n    } else {\n      startLearningSession();\n    }\n  }\n  \n  // ========== SETTINGS UI ==========\n  function toggleSettings() {\n    showSettings = !showSettings;\n  }\n  \n  // Easter egg: Long press on settings cog for developer settings\n  let settingsLongPressTimer = null;\n  \n  function handleSettingsMouseDown() {\n    settingsLongPressTimer = setTimeout(() => {\n      settings.updateSetting('showDeveloperSettings', !currentSettings.showDeveloperSettings);\n      log(3, '🥚 Developer settings easter egg triggered!', currentSettings.showDeveloperSettings ? 'Enabled' : 'Disabled');\n      \n      const settingsButton = document.querySelector('.settings-toggle');\n      if (settingsButton) {\n        settingsButton.style.transform = 'scale(0.95)';\n        setTimeout(() => settingsButton.style.transform = '', 150);\n      }\n    }, 2000);\n  }\n  \n  function handleSettingsMouseUp() {\n    if (settingsLongPressTimer) {\n      clearTimeout(settingsLongPressTimer);\n      settingsLongPressTimer = null;\n    }\n  }\n  \n  function handleSettingsMouseLeave() {\n    if (settingsLongPressTimer) {\n      clearTimeout(settingsLongPressTimer);\n      settingsLongPressTimer = null;\n    }\n  }\n  \n  // ========== MANAGEMENT ACTIONS ==========\n  function clearTTSCache() {\n    if (tutor && confirm('Are you sure you want to clear the TTS cache? This will remove all cached audio.')) {\n      const success = tutor.clearTTSCache();\n      status = success ? 'TTS cache cleared successfully!' : 'Failed to clear TTS cache.';\n      \n      setTimeout(() => {\n        if (!isLearning) status = \"Ready to start learning!\";\n      }, 3000);\n    }\n  }\n  \n  function resetLearningQueue() {\n    if (learningQueue && confirm('Are you sure you want to reset the learning queue? This will clear all progress and start fresh.')) {\n      learningQueue.reset();\n      \n      const availableCategories = learningQueue.getCategories();\n      categories = availableCategories;\n      \n      const newEnabledCategories = {};\n      availableCategories.forEach(category => {\n        newEnabledCategories[category] = true;\n        learningQueue.setCategory(category, true);\n      });\n      \n      settings.updateSetting('enabledCategories', newEnabledCategories);\n      updateUpcomingQueue();\n      \n      status = 'Learning queue reset successfully!';\n      setTimeout(() => {\n        if (!isLearning) status = \"Ready to start learning!\";\n      }, 3000);\n    }\n  }\n</script>\n\n<main class=\"app-container\">\n  <!-- Title -->\n  <div class=\"title\">\n    <h1>Language Tutor</h1>\n    <p>Your personal AI language learning companion</p>\n  </div>\n\n  <!-- Learning Session Component -->\n  <LearningSession\n    {currentPhrase}\n    {status}\n    {isLearning}\n    {canStart}\n    showCategory={currentSettings.showCategory}\n    showFeedback={currentSettings.showFeedback}\n    showExpectedOutput={currentSettings.showExpectedOutput}\n    enableAudioHints={currentSettings.enableAudioHints}\n    nativeLanguage={currentSettings.nativeLanguage}\n    learningLanguage={currentSettings.learningLanguage}\n    on:startStop={handleStartStop}\n  />\n\n  <!-- Settings Section -->\n  <div class=\"settings-section\">\n    <button \n      class=\"settings-toggle\" \n      on:click={toggleSettings}\n      on:mousedown={handleSettingsMouseDown}\n      on:mouseup={handleSettingsMouseUp}\n      on:mouseleave={handleSettingsMouseLeave}\n      on:touchstart={handleSettingsMouseDown}\n      on:touchend={handleSettingsMouseUp}\n      title={currentSettings.showDeveloperSettings ? \"Developer mode active! Long press again to disable.\" : \"Long press for developer settings\"}\n    >\n      <span class=\"settings-icon\" class:developer-mode={currentSettings.showDeveloperSettings}>⚙️</span>\n      Settings\n      <span class=\"chevron-icon\">{showSettings ? '⬆️' : '⬇️'}</span>\n    </button>\n\n    {#if showSettings}\n      <div class=\"settings-panel\">\n        <!-- Language Selection -->\n        <LanguageSettings\n          nativeLanguage={currentSettings.nativeLanguage}\n          learningLanguage={currentSettings.learningLanguage}\n          {nativeLanguages}\n          {learningLanguages}\n          loggingVerbosity={currentSettings.loggingVerbosity}\n        />\n\n        <!-- Display Options -->\n        <DisplaySettings\n          bind:showExpectedOutput={currentSettings.showExpectedOutput}\n          bind:showCategory={currentSettings.showCategory}\n          bind:showFeedback={currentSettings.showFeedback}\n          bind:showUpcomingQueue={currentSettings.showUpcomingQueue}\n          bind:enableAudioHints={currentSettings.enableAudioHints}\n          bind:translationThreshold={currentSettings.translationThreshold}\n          bind:pauseBetweenTests={currentSettings.pauseBetweenTests}\n          bind:pauseWhenStruggling={currentSettings.pauseWhenStruggling}\n          on:updateQueue={updateUpcomingQueue}\n        />\n\n        <!-- Algorithm Settings -->\n        <AlgorithmSettings\n          bind:passThreshold={currentSettings.passThreshold}\n          bind:repetitivenessFactor={currentSettings.repetitivenessFactor}\n        />\n\n        <!-- Categories -->\n        <CategoryManager\n          {categories}\n          bind:enabledCategories={currentSettings.enabledCategories}\n          loggingVerbosity={currentSettings.loggingVerbosity}\n          on:categoryChange={handleCategoryChange}\n        />\n        \n        <!-- Management Buttons -->\n        <div class=\"management-section\">\n          <h3 class=\"section-header\">Management</h3>\n          <div class=\"management-buttons\">\n            <button \n              class=\"management-btn clear-btn\"\n              on:click={clearTTSCache}\n              disabled={!tutor}\n            >\n              🗑️ Clear TTS Cache\n            </button>\n            <button \n              class=\"management-btn reset-btn\"\n              on:click={resetLearningQueue}\n              disabled={!learningQueue}\n            >\n              🔄 Reset Learning Queue\n            </button>\n          </div>\n        </div>\n\n        <!-- Developer Settings -->\n        <DeveloperSettings\n          showDeveloperSettings={currentSettings.showDeveloperSettings}\n          bind:loggingVerbosity={currentSettings.loggingVerbosity}\n          on:debugTest={handleDebugTest}\n        />\n      </div>\n    {/if}\n  </div>\n\n  <!-- Queue Display Component -->\n  <QueueDisplay\n    showUpcomingQueue={currentSettings.showUpcomingQueue}\n    {upcomingQueue}\n  />\n</main>\n\n<style>\n  /* Developer settings styling */\n  .settings-icon.developer-mode {\n    color: #8b5cf6;\n    text-shadow: 0 0 8px rgba(139, 92, 246, 0.6);\n    animation: pulse 2s infinite;\n  }\n  \n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n    target: document.body\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","action_destroyer","action_result","destroy","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","to_number","set_data","set_input_value","input","select_option","select","mounting","option","__value","selected","undefined","selectedIndex","select_value","selected_option","querySelector","toggle_class","toggle","classList","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","cancelable","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","defaultPrevented","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","bind","index","props","bound","create_component","mount_component","customElement","m","new_on_destroy","on_mount","map","filter","on_destroy","destroy_component","filtered","targets","indexOf","flush_render_callbacks","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","splice","$set","$$props","obj","$$set","keys","LearningQueue","constructor","sourceLanguage","targetLanguage","level","baseDir","testDatabase","queue","categories","currentTestIndex","storageKey","passThreshold","memoryLength","repetitivenessFactor","loadTestData","loadState","filename","response","fetch","ok","status","json","error","console","travel","source","food","savedState","localStorage","getItem","state","JSON","parse","syncQueueWithDatabase","initializeAllCategories","expectedTests","categoryName","isSelected","entries","test","createTestId","item","testId","currentTestIds","addTestToQueue","queueItem","inertia","category","recentResults","randomIndex","Math","floor","random","addCategoryToQueue","removeCategoryFromQueue","categoryTestIds","getCategories","setCategory","enabled","saveState","getNextTest","scoreCurrentTest","score","currentTest","passed","successCount","reduce","sum","result","successRate","power","movement","pow","newPosition","min","updateOptions","newOptions","setItem","stringify","getQueueLength","getTopQueueItems","count","itemsToShow","position","reset","log","removeItem","getQueueStats","stats","totalItems","inertiaDistribution","negative","neutral","positive","LanguageTutor","outputElement","mergeOptions","apiKeyEndpoint","feedbackThreshold","statusCallback","loggingVerbosity","audioPath","enableBleep","enableAudioHints","audioHintDuration","audioHintMinWords","vad","threshold","prefixPaddingMs","silenceDurationMs","audioContext","currentAudioStream","audioProcessor","ws","isListening","currentSessionKey","keyRefreshInterval","initializeSessionKeys","args","logError","logWarn","warn","defaults","userOptions","merged","key","hasOwnProperty","isArray","playNotificationBleep","tempAudioContext","window","AudioContext","webkitAudioContext","duration","sampleRate","buffer","createBuffer","getChannelData","time","frequency","amplitude","sin","PI","createBufferSource","connect","destination","onended","close","start","message","refreshSessionKey","startKeyRefreshTimer","session_token","showError","getSessionKey","setInterval","async","stopKeyRefreshTimer","clearInterval","speakText","language","reject","detectLanguage","isNativeLanguage","speedMode","generateAudioFilename","audioUrl","playAudioFromUrl","first20Bytes","stringToUtf8Bytes","sanitized","byte","char","String","fromCharCode","replace","sha256","substring","str","utf8Bytes","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Uint8Array","toString","padStart","join","bytes","code","charCodeAt","url","audio","Audio","onloadeddata","onerror","oncanplaythrough","play","catch","playError","src","load","playAudioHint","onloadedmetadata","hintDuration","toFixed","stopTimer","setTimeout","pause","currentTime","clearTimeout","shouldPlayHint","targetText","wordCount","trim","split","r","shouldHint","startRecording","stream","navigator","mediaDevices","getUserMedia","channelCount","echoCancellation","noiseSuppression","createMediaStreamSource","createScriptProcessor","onaudioprocess","readyState","WebSocket","OPEN","audioData","inputBuffer","pcm16","Int16Array","max","uint8Array","base64Audio","btoa","apply","send","pauseListening","resumeListening","stopRecording","getTracks","track","stop","disconnect","englishWords","words","toLowerCase","word","includes","showStatus","textContent","style","color","showScore","getScoreMessage","emoji","getScoreEmoji","getOptions","clearTTSCache","getTTSCacheSize","chunks","sizeBytes","sizeMB","note","sourceText","waitTime","sessionKey","silenceTimer","hasResponse","onopen","prompt","session","modalities","instructions","input_audio_format","input_audio_transcription","model","turn_detection","prefix_padding_ms","silence_duration_ms","cleanup","commentary","onmessage","output","content","parsed","parseInt","Boolean","scoreMatch","match","stopMatch","wasListening","stack","subscriber_queue","defaultSettings","nativeLanguage","learningLanguage","showExpectedOutput","showCategory","showFeedback","showUpcomingQueue","translationThreshold","pauseBetweenTests","pauseWhenStruggling","showDeveloperSettings","enabledCategories","settings","subscribe","set","subscribers","new_value","run_queue","subscriber","invalidate","size","writable","saved","parsedSettings","current","save","updateSetting","newSettings","updateSettings","updates","createSettingsStore","autoSave","settingName","handleChange","checked","t0","t0_value","select0","select1","h3","div2","div0","label0","div1","label1","nativeLanguages","learningLanguages","label","span0","t24_value","t36_value","create_if_block_1","create_if_block_2","create_if_block_3","if_block1","create_if_block","div6","input0","input1","span1","label2","input2","span2","label3","input3","span3","label4","option0","option1","option2","div3","label5","span4","input4","div5","label6","span8","input5","div4","t24","t36","dispatch","t19_value","t19","show_if","values","some","func","span","t1","t1_value","div","handleCategoryToggle","$$invalidate","t5_value","button0","button1","t5","action","t3_value","create_if_block_5","p0","p1","t3","button","disabled","button_disabled_value","t2","t2_value","t4","t4_value","currentPhrase","isLearning","canStart","phrase","t7_value","t9_value","t7","t9","t11","t11_value","if_block","upcomingQueue","displaysettings_props","algorithmsettings_props","categorymanager_props","developersettings_props","languagesettings_changes","displaysettings_changes","algorithmsettings_changes","categorymanager_changes","developersettings_changes","button_title_value","main","passive","learningsession_changes","queuedisplay_changes","showSettings","learningQueue","tutor","isInitialized","currentSettings","oldSettings","initializeLearningQueue","initializeTutor","updateSystems","languageOptions","English","availableCategories","newEnabledCategories","updateUpcomingQueue","startLearningSession","stopLearningSession","pauseDuration","getPauseDuration","runLearningLoop","initializeSystems","settingsLongPressTimer","settingsButton","transform","confirm","success","$$self","body"],"mappings":"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"}